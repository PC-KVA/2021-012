FUNCTION_BLOCK "AllUF"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR 
      inWorkUF : USInt;
      reqNumbWorkUF { ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;
      readyUF : Array[0..1] of Bool;
      workUF : Array[0..1] of Bool;
      cmUF : Array[0..1] of Bool;
      HandlerUF1 : "HandlerUF";
      HandlerUF2 : "HandlerUF";
   END_VAR

   VAR_TEMP 
      tChModeUF1 : Bool;
      tChModeUF2 : Bool;
      tErr : Bool;
   END_VAR

   VAR CONSTANT 
      UF1 : Int := 0;
      UF2 : Int := 1;
   END_VAR


BEGIN
	REGION Device mode for UF12 and UF34
	    //Valves UF1
	    "dtAV".DVA501.mode :=
	    "dtAV".DVA503.mode :=
	    "dtAV".DVA505.mode :=
	    "dtAV".DVA507.mode :=
	    "dtAV".DVA508.mode :=
	    "dtAV".DVA509.mode :=
	    "dtAV".DVA512.mode :=
	    "dtUF".modeUF1;
	    //Valves UF2
	    "dtAV".DVA502.mode :=
	    "dtAV".DVA510.mode :=
	    "dtAV".DVA513.mode :=
	    "dtAV".DVA514.mode :=
	    "dtAV".DVA515.mode :=
	    "dtAV".DVA516.mode :=
	    "dtAV".DVA506.mode :=
	    "dtUF".modeUF2;
	    //Common devices
	    "dtAV".DVA504.mode :=
	    "dtAV".DVA511.mode :=
	    //    "dtPump".P701.mode :=
	    //    "dtPump".P701.mode :=
	    "dtUF".modeUF1 OR "dtUF".modeUF2;
	END_REGION
	REGION Calculate number of UF in work
	    // "CalcNumDevUf"(cmStart:= "dtUF".cmAuto,
	    //                nWorkDev:=#reqNumbWorkUF,
	    //                lev:= "dtAnalogData".et_data["aiLT601"].Par,
	    //                levStop1:="dtParmUF".filtrateStopLevUF1,
	    //                levStart1:="dtParmUF".filtrateStartLevUF1,
	    //                levStop2:="dtParmUF".filtrateStopLevUF2,
	    //                levStart2:="dtParmUF".filtrateStartLevUF2,
	    //                settingsError=>"dtParmUF".errSettingsLev,
	    //                nNeedWork:=#reqNumbWorkUF);
	END_REGION
	REGION Prepare FOR select work UF
	    #readyUF[#UF1] := "dtUF".modeUF1
	    AND NOT (
	    "dtUF".flagUF1.Err OR
	    "dtUF".flagUF1.HW OR
	    "dtUF".flagUF1.HW_A OR
	    "dtUF".flagUF1.CEB1 OR
	    "dtUF".flagUF1.CEB1_A OR
	    "dtUF".flagUF1.CEB2 OR
	    "dtUF".flagUF1.CEB2_A
	    );
	    #readyUF[#UF2] := "dtUF".modeUF2
	    AND NOT (
	    "dtUF".flagUF2.Err OR
	    "dtUF".flagUF2.HW OR
	    "dtUF".flagUF2.HW_A OR
	    "dtUF".flagUF2.CEB1 OR
	    "dtUF".flagUF2.CEB1_A OR
	    "dtUF".flagUF2.CEB2 OR
	    "dtUF".flagUF2.CEB2_A
	    );
	    
	    #workUF[#UF1] := "dtUF".flagUF1.Filtration;
	    #workUF[#UF2] := "dtUF".flagUF2.Filtration;
	END_REGION
	REGION Select work UF
	    "DevInWork"(ReqNumbWorkDev := #reqNumbWorkUF,
	                ReadyDev:=#readyUF,
	                WorkDev := #workUF,
	                DevCm => #cmUF,
	                ErrNotSameBound => #tErr);
	    
	    IF #cmUF[#UF1] AND "dtUF".flagUF1.StandBy THEN
	        #HandlerUF1.cmUF := "UF_CM_START";
	    END_IF;
	    IF NOT (#cmUF[#UF1]) AND "dtUF".flagUF1.Filtration THEN
	        #HandlerUF1.cmUF := "UF_CM_STOP";
	    END_IF;
	    
	    IF #cmUF[#UF2] AND "dtUF".flagUF2.StandBy THEN
	        #HandlerUF2.cmUF := "UF_CM_START";
	    END_IF;
	    IF NOT (#cmUF[#UF2]) AND "dtUF".flagUF2.Filtration THEN
	        #HandlerUF2.cmUF := "UF_CM_STOP";
	    END_IF;
	END_REGION
	REGION UF handlers
	    #HandlerUF1(otherDeviceAvaible := #readyUF[#UF2],
	                otherDeviceInFiltration := "dtUF".flagUF2.Filtration,
	                filtrationTimeMin := "dtParmUF".filtrationTime,
	                flagUF := "dtUF".flagUF1,
	                inValve => "dtAV".DVA503.cmAuto,
	                bwValve => "dtAV".DVA504.cmAuto,
	                bwFiltrValve => "dtAV".DVA506.cmAuto,
	                outValve => "dtAV".DVA505.cmAuto,
	                upDrainValve => "dtAV".DVA507.cmAuto,
	                drainTankValve => "dtAV".DVA508.cmAuto,
	                drainValve => "dtAV".DVA509.cmAuto,
	                airValve => "dtAV".DVA501.cmAuto);
	    #HandlerUF2(otherDeviceAvaible := #readyUF[#UF1],
	                otherDeviceInFiltration := "dtUF".flagUF1.Filtration,
	                filtrationTimeMin := "dtParmUF".filtrationTime,
	                flagUF := "dtUF".flagUF2,
	                inValve => "dtAV".DVA510.cmAuto,
	                bwValve => "dtAV".DVA511.cmAuto,
	                bwFiltrValve => "dtAV".DVA512.cmAuto,
	                outValve => "dtAV".DVA513.cmAuto,
	                upDrainValve => "dtAV".DVA514.cmAuto,
	                drainTankValve => "dtAV".DVA515.cmAuto,
	                drainValve => "dtAV".DVA516.cmAuto,
	                airValve => "dtAV".DVA502.cmAuto);
	END_REGION
	
	
	
	
	
	
	
	
	
	
END_FUNCTION_BLOCK

